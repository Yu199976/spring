### 1、什么是Spring？

1. 多对对的表需要建立中间表维护外键

### 2、SpringMVC拦截器

1. 拦截器（interceptor）的作用：类似servlet中的Filter
2. 快速入门
	1. 创建拦截器类实现HandlerInertceptor接口
	2. 配置MVC文件
	3. 测试拦截器

3. 异常处理

1. 两种异常处理方式
	1. SpringMVC提供的简单异常处理器SimpleMappingExceptionResolve
	2. 实现Spring的异常处理接口HandlerExceptionResolve。自定义自己的异常处理器

### 3、AOP

1. Spring aop的简介
	1. 什么是aop	
	   1. 面向切面编程，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。
	2. 作用
	   1. 在程序运行期间，在不修改源码的情况下对方法进行功能增强。
	3. 优势
	   1. 减少重复代码，提高开发效率，并且便于维护。	
	
2. 相关概念
	1. Target（目标对象）：代理的目标对象
	2. Proxy（代理）：一个类被AOP织入增强后，就产生一个结果代理类
	3. Joinpoint（连接点）：指被拦截到的点（方法） 可以被增强的方法被称为连接点
	4. Pointcut（切入点）：指要被增强的方法
	5. Advice（通知/增强）：拦截到连接点之后要做的事就是通知
	6. Aspect（切面）：切点和通知的结合
	7. WeAVing（织入）：将切点和增强结合的过程

3. 开发明确的事项
	1. 需要编写的内容
		1. 编写核心业务代码（目标类的目标方法）
		2. 编写切面类，切面类有增强方法
		3. 配置织入关系

	2. 技术实现的内容
	3. 使用哪种代理方式（jdk、cglib）

4. xml配置AOP详解
   	1. 切点表达式
   		1. 语法：execution（[修饰符]返回值类型 包名.类名.方法名(参数)）
   		2. 访问修饰符可以省略
   		3. 返回值\包名\类名\方法名可以使用星号*代表任意
   		4. 包名与类名之间一个点.代表当前包下的类,..表示当前包和子包的类
   		5. 参数列名可以使用..表示任意个数

### 4、Spring事务控制

1. 编程式事务控制相关对象 
	1. 事务的传播行为：解决业务方法时事务统一性（用于业务层a调用业务层b）
		1. PROPAGATION_REQUIRED	如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。
		2. PROPAGATION_SUPPORTS	支持当前事务，如果当前没有事务，就以非事务方式执行。
		3. PROPAGATION_MANDATORY	使用当前的事务，如果当前没有事务，就抛出异常。
		4. PROPAGATION_REQUIRES_NEW	新建事务，如果当前存在事务，把当前事务挂起。
		5. PROPAGATION_NOT_SUPPORTED	以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
		6. PROPAGATION_NEVER	以非事务方式执行，如果当前存在事务，则抛出异常。
		7. PROPAGATION_NESTED	如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似   	的操作。
2. 基于XML的声明式事务控制
	1. 什么是声明式事务控制：采用配置方式
	2. 底层就是AOP
3. 基于注解的声明式事务控制

### 5、Spring的设计模式

1. 工厂模式
2. 单例模式
3. 代理模式（AOP）
4. 模板模式（JDBCTemplate）
5. 策略模式
6. 观察者模式
 	1. 事件角色EventObject ApplicationEvent
 	2. 事件监听者角色ApplicationListener----onApplicationEvent（）
 	3. 事件发布者角色ApplicationEventPublisher



### 6、源码解析*

1. 模拟Spring容器

   1. Spring容器启动

      1. 创建上下文对象ApplicationContext

      2. 判断配置类会xml配置文件中有没有ComponentScan注解或属性

         1. 通过类加载器反射获取字节码对象

         2. 类加载器对象根据getResource获取当前文件的url地址

         3. 判断当前地址是否是文件目录

            1. 获取当前文件夹下的所有文件list

            2. 判断所有文件结尾是否以.class结尾

               1. 通过拼接、截取获取当前文件的项目路径（相对）如：com.xxx.service

               2. 根据路径获取当前文件的字节码对象

               3. 判断是否有@Component注解

                  1. 判断是单例还是多例

                  2. 将对象的class和Scope存入BeanDefinition对象中

                  3. 单例bean对象放入单例池中

      3. 模拟getBean方法

         1. 创建getBean(String beanName)方法

         2. 从BeanDefinitionMap中拿key为beanName的value

         3. 判断是否存在
            1. 不存在抛出异常
         4. 根据拿到的BeanDefinition对象getScope作用域
         5. 判断是单例bean还是多例bean
            1. 单例bean：直接从单例池SingletonObjects中拿bean对象
            2. 多例bean：调用createBean方法
      4. 创建bean-》模拟createBean(String beanName, BeanDefinition beanDefinition) 方法
         1. 根据beanDefinition对象拿到其class对象
         2. 调用clazz.getConstructor().newInstance()创建bean对象
         3. 返回bean


​                  